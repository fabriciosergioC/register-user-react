services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: register-user-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-senha123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-register-users}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - register-user-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: fabriciosergioC/register-user-backend:latest
    container_name: register-user-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-3001}
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-senha123}@mongodb:27017/${MONGO_DATABASE:-register-users}?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - register-user-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React + Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: fabriciosergioC/register-user-frontend:latest
    container_name: register-user-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "3000:80"  # Mapeamento adicional para manter compatibilidade
    environment:
      REACT_APP_API_URL: http://localhost:3001
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - register-user-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Express (Admin Interface) - Opcional
  mongo-express:
    image: mongo-express:1.0.2
    container_name: register-user-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-senha123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-senha123}@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - register-user-network
    profiles:
      - admin

# Volumes para persistência de dados
volumes:
  mongodb_data:
    driver: local
    name: register-user-mongodb-data

# Rede personalizada para comunicação entre containers
networks:
  register-user-network:
    driver: bridge
    name: register-user-network
    ipam:
      config:
        - subnet: 172.20.0.0/16