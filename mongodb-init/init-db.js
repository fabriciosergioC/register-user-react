// ========================================
// SCRIPT DE INICIALIZA√á√ÉO - MONGODB
// ========================================
// Este script √© executado quando o MongoDB √© inicializado pela primeira vez

print('üîÑ Inicializando banco de dados register-users...');

// Selecionar o banco de dados
db = db.getSiblingDB('register-users');

// Criar usu√°rio para a aplica√ß√£o (opcional)
try {
    db.createUser({
        user: "appuser",
        pwd: "apppassword",
        roles: [
            {
                role: "readWrite",
                db: "register-users"
            }
        ]
    });
    print('‚úÖ Usu√°rio da aplica√ß√£o criado com sucesso!');
} catch (e) {
    print('‚ÑπÔ∏è  Usu√°rio da aplica√ß√£o j√° existe ou erro: ' + e);
}

// Criar cole√ß√£o de usu√°rios se n√£o existir
if (!db.getCollectionNames().includes('users')) {
    db.createCollection('users');
    print('‚úÖ Cole√ß√£o "users" criada com sucesso!');
} else {
    print('‚ÑπÔ∏è  Cole√ß√£o "users" j√° existe');
}

// Inserir dados de exemplo (opcional)
const sampleUsers = [
    {
        name: "Jo√£o Silva",
        age: 30,
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        name: "Maria Santos",
        age: 25,
        createdAt: new Date(),
        updatedAt: new Date()
    }
];

try {
    const result = db.users.insertMany(sampleUsers);
    print('‚úÖ ' + result.insertedIds.length + ' usu√°rios de exemplo inseridos!');
} catch (e) {
    print('‚ÑπÔ∏è  Erro ao inserir usu√°rios de exemplo (podem j√° existir): ' + e);
}

// Criar √≠ndices para melhor performance
try {
    db.users.createIndex({ "name": 1 }, { unique: false });
    db.users.createIndex({ "createdAt": -1 });
    print('‚úÖ √çndices criados com sucesso!');
} catch (e) {
    print('‚ÑπÔ∏è  √çndices j√° existem ou erro: ' + e);
}

print('üéâ Inicializa√ß√£o do MongoDB conclu√≠da!');
print('üìä Total de usu√°rios no banco: ' + db.users.countDocuments());
print('üîó Banco pronto para conex√µes da aplica√ß√£o');